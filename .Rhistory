source('~/Desktop/optimizeit/script.R')
installed.packages()
names(installed.packages())
rownames(installed.packages())
colnames(installed.packages())
installed.packages()$Package
installed.packages()[Package]
installed.packages()['Package']
installed.packages()[['Package']]
installed.packages()
class(installed.packages())
as.data.frame(installed.packages())
as.data.frame(installed.packages())$Package
as.character(as.data.frame(installed.packages())$Package)
as.data.frame(installed.packages(), stringsAsFactors = FALSE)$Package
installedPackages <- as.data.frame(installed.packages(), stringsAsFactors = FALSE)$Package
if (!('ape' %in% installedPackages))      install.packages('ape')
if (!('betapart' %in% installedPackages)) install.packages('betapart')
library(ape)
library(betapart)
tree<-read.tree("local do arquivo/pruned_tree.txt")
comm<-read.table("local do arquivo/matriz_pa.txt")
tree
comm
class(comm)
View(comm)
pbd<-phylo.beta.pair(comm, tree, index.family="sorensen")
class(comm)
library(Matrix)
matcomm <- Matrix(comm)
class(comm$Abrocoma_bennettii)
classes <- llply(colnames(comm), function(x) class(comm[[x]]))
library(plyr)
classes <- llply(colnames(comm), function(x) class(comm[[x]]))
classes
unique(classes)
data.matrix(comm)
Matrix(data.matrix(comm))
matComm <- Matrix(data.matrix(comm))
pbd<-phylo.beta.pair(matComm, tree, index.family="sorensen")
matComm <- Matrix(data.matrix(comm[1:10,]))
pbd<-phylo.beta.pair(matComm, tree, index.family="sorensen")
pbd
phylo.beta.pair
debugonce(phylo.beta.pair)
pbd<-phylo.beta.pair(matComm, tree, index.family="sorensen")
index.family
pbc
class(x)
x
pbc
debugonce(phylo.beta.pair)
pbd<-phylo.beta.pair(matComm, tree, index.family="sorensen")
class(pbc)
pbc
comm
nrow(comm)
pbd<-phylo.beta.pair(comm, tree, index.family="sorensen")
debugonce(phylo.beta.pair)
pbd<-phylo.beta.pair(comm, tree, index.family="sorensen")
nrow(pbc)
phylo.betapart.core
debugonce(phylo.betapart.core)
pbd<-phylo.beta.pair(comm, tree, index.family="sorensen")
combin
debugonce(phylo.betapart.core)
pbd<-phylo.beta.pair(comm, tree, index.family="sorensen")
debugonce(phylo.betapart.core)
pbd<-phylo.beta.pair(comm, tree, index.family="sorensen")
gc()
pdnew?
.;
?pdnew
source('~/Desktop/optimizeit/betapart/R/beta-sample.R')
source('~/Desktop/optimizeit/betapart/R/beta-temporal.R')
source('~/Desktop/optimizeit/betapart/R/betapart-core.R')
source('~/Desktop/optimizeit/betapart/R/betapart.R')
source('~/Desktop/optimizeit/betapart/R/bray-part.R')
source('~/Desktop/optimizeit/betapart/R/functional.beta.multi.R')
source('~/Desktop/optimizeit/betapart/R/functional.beta.pair.R')
source('~/Desktop/optimizeit/betapart/R/functional.betapart.core.R')
source('~/Desktop/optimizeit/betapart/R/phylo.beta.multi.r')
source('~/Desktop/optimizeit/betapart/R/phylo.beta.pair.r')
source('~/Desktop/optimizeit/betapart/R/phylo.betapart.core.r')
library(ape)
library(geometry)
library(picante)
library(rcdd)
library(vegan)
source('~/Desktop/optimizeit/betapart/R/phylo.beta.pair.r')
tree<-read.tree("local do arquivo/pruned_tree.txt")
comm<-read.table("local do arquivo/matriz_pa.txt")
pbd<-phylo.beta.pair(comm, tree, index.family="sorensen")
index.family <- match.arg(index.family, c("jaccard", "sorensen"))
pbc<-x
if (!inherits(x, "phylo.betapart")) {
pbc <- phylo.betapart.core(x,tree)
} # end of computing core results
pbc
library(ape)
library(geometry)
library(picante)
library(rcdd)
library(vegan)
library(Matrix)
#IMPORTAR ARQUIVOS
tree<-read.tree("local do arquivo/pruned_tree.txt")
comm<-read.table("local do arquivo/matriz_pa.txt")
library(MBI)
install.packages('MBI')
MBI::batch.calculation(comm)
comm <- as.matrix(comm)
MBI::batch.calculation(comm)
msorensen(comm)
MBI::msorensen(comm)
MBI::msorensen(comm[1:100,])
MBI::msorensen(comm[1:1000,])
install.packages('recluster')
install.packages('igraph')
install.packages('recluster')
library(recluster)
recluster.boot(tree, comm[1:10,])
recluster.boot(tree, comm)
class(tree)
recluster.cons(comm[1:10,])
mt <-recluster.cons(comm[1:10,])
mt <-recluster.cons(comm)
mt <-recluster.cons(comm[1:100,])
mt <-recluster.cons(comm[1:1000,])
mt
recluster.boot(tree=mt,mat = comm[1:1000,])
datamod
comm
mat <- comm[1:10]
mat <- comm[1:10,]
View(mat)
dim(mat)
mt$trees
length(mt$trees)
mt$cons
print(mt$cons)
